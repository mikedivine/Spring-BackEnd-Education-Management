package com.cst438.controller;

import com.cst438.domain.*;
import com.cst438.dto.*;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;


import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

@RestController
@CrossOrigin(origins = "http://localhost:3000")
public class AssignmentController {

    @Autowired
    AssignmentRepository assignmentRepository;

    @Autowired
    UserRepository userRepository;

    @Autowired
    EnrollmentRepository enrollmentRepository;

    @Autowired
    GradeRepository gradeRepository;

    @Autowired
    CourseRepository courseRepository;

    @Autowired
    SectionRepository sectionRepository;

    // instructor lists assignments for a section.  Assignments ordered by due date.
    // logged in user must be the instructor for the section
    @GetMapping("/sections/{secNo}/assignments")
    public List<AssignmentDTO> getAssignments(
      @PathVariable("secNo") int secNo,
      @RequestParam("instructorId") int instructorId) {

        User user = userRepository.findById(instructorId).orElse(null);
        // Verify user exists and is an instructor
        instructorExists(user);

        // hint: use the assignment repository method
        //  findBySectionNoOrderByDueDate to return
        //  a list of assignments
        List<Assignment> assignments = assignmentRepository.findBySectionNoOrderByDueDate(secNo);
        List<AssignmentDTO> dto_list = new ArrayList<>();
        for(Assignment a : assignments) {
            Section section = a.getSection();
            Course course = section.getCourse();
            dto_list.add(
                    new AssignmentDTO(
                            a.getAssignmentId(),
                            a.getTitle(),
                            a.getDue_date().toString(),
                            course.getCourseId(),
                            section.getSecId(),
                            section.getSectionNo()
                    ));
        }
        return dto_list;
    }

    // add assignment
    // user must be instructor of the section
    // return AssignmentDTO with assignmentID generated by database
    @PostMapping("/assignments")
    public AssignmentDTO createAssignment(
      @RequestBody AssignmentDTO assignmentDTO,
      @RequestParam("instructorId") int instructorId
      ) {

        User user = userRepository.findById(instructorId).orElse(null);
        // Verify user exists and is an instructor
        instructorExists(user);

        Assignment a = new Assignment();
        a.setAssignmentId(assignmentDTO.id());
        a.setTitle(assignmentDTO.title());
        a.setDue_date(Date.valueOf(assignmentDTO.dueDate()));

        //check if the course exists
        Course c = courseRepository.findById(assignmentDTO.courseId()).orElse(null);
        if(c==null){
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "course not found " + assignmentDTO.id());
        }

        //check if the section exists
        Section s = sectionRepository.findBySecIdAndSectionNo(assignmentDTO.secId(),assignmentDTO.secNo());
        if (s==null){
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "section not found " + assignmentDTO.secId());
        }

        //link the assignment to the section
        a.setSection(s);

        //save Assignment ID, Title, Duedate, and Section to Assignment Table.
        assignmentRepository.save(a);

        //return the information
        return new AssignmentDTO(
                a.getAssignmentId(),
                a.getTitle(),
                assignmentDTO.dueDate(),
                c.getCourseId(),
                s.getSecId(),
                s.getSectionNo()
        );
    }

    // update assignment for a section.  Only title and dueDate may be changed.
    // user must be instructor of the section
    // return updated AssignmentDTO
    @PutMapping("/assignments")
    public AssignmentDTO updateAssignment(
            @RequestBody AssignmentDTO dto,
            @RequestParam("instructorId") int instructorId
    ) {

        User user = userRepository.findById(instructorId).orElse(null);
        // Verify user exists and is an instructor
        instructorExists(user);

        Assignment a = assignmentRepository.findById(dto.id()).orElse(null);
        if (a==null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "assignment not found " + dto.id());
        } else {
            a.setTitle(dto.title());
            a.setDue_date(Date.valueOf(dto.dueDate()));
            assignmentRepository.save(a);
            return new AssignmentDTO(
                    a.getAssignmentId(),
                    a.getTitle(),
                    a.getDue_date().toString(),
                    null,
                    a.getSection().getSecId(),
                    a.getSection().getSectionNo()
            );
        }
    }

    // delete assignment for a section
    // logged in user must be instructor of the section
    @DeleteMapping("/assignments/{assignmentId}")
    public void deleteAssignment(
            @PathVariable("assignmentId") int assignmentId,
            @RequestParam("instructorId") int instructorId
    ) {

        User user = userRepository.findById(instructorId).orElse(null);
        // Verify user exists and is an instructor
        instructorExists(user);

        Assignment a = assignmentRepository.findById(assignmentId).orElse(null);
        //if assignment does not exist, do nothing.
        if(a!=null){
            assignmentRepository.delete(a);
        }
    }

    // instructor gets grades for assignment ordered by student name
    // user must be instructor for the section
    @GetMapping("/assignments/{assignmentId}/grades")
    public List<GradeDTO> getAssignmentGrades(
      @PathVariable("assignmentId") int assignmentId,
      @RequestParam("instructorId") int studentId) {

      // Finds the assignment by ID to get its related sectionNo
      Assignment assignment = assignmentRepository.findById(assignmentId)
        .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Assignment not found"));

      // Gets all enrollments found under the sections related to the assignment id
      List<Enrollment> enrollments = enrollmentRepository.findEnrollmentsBySectionNoOrderByStudentName(assignment.getSection().getSectionNo());

      List<GradeDTO> gradeDTOs = new ArrayList<>();

      for (Enrollment enrollment : enrollments) {
        // Finds the assignment grade related to the assignmentID and enrollmentID
        Grade grade = gradeRepository.findByEnrollmentIdAndAssignmentId(enrollment.getEnrollmentId(), assignmentId); // Create a new grade if it doesn't exist
        gradeRepository.save(grade); // Save the new grade if it was created
        gradeDTOs.add(new GradeDTO(grade.getGradeId(),
          enrollment.getUser().getName(),
          enrollment.getUser().getEmail(),
          grade.getAssignment().getTitle(),
          enrollment.getSection().getCourse().getCourseId(),
          enrollment.getSection().getSecId(),
          grade.getScore()));
      }
      return gradeDTOs;
    }

    // instructor uploads grades for assignment
    // user must be instructor for the section
    @PutMapping("/grades")
    public void updateGrades(
      @RequestBody List<GradeDTO> dlist) {

        for (GradeDTO gradeDTO : dlist) {
          // Retrieve the Grade entity from the DB using the ID from the DTO provided
          Grade grade = gradeRepository.findById(gradeDTO.gradeId())
            .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Grade not found"));

          // Updates the score of the Grade in the DB
          grade.setScore(gradeDTO.score());

          // Saves the updated Grade in the DB
          gradeRepository.save(grade);
        }

    }

    // student lists their assignments/grades for an enrollment ordered by due date
    // student must be enrolled in the section
    @GetMapping("/assignments")
    public List<AssignmentStudentDTO> getStudentAssignments(
            @RequestParam("studentId") int studentId,
            @RequestParam("year") int year,
            @RequestParam("semester") String semester) {

        //creates a list of sections based on studentId, year, semester
        List<Section> sections = sectionRepository.findByStudentIdAndYearAndSemester(studentId, year, semester);
        List<AssignmentStudentDTO> assignmentDTO = new ArrayList<>();

        //creates a list assignments for the sections above
        for (Section section : sections){
            List<Assignment> assignments = assignmentRepository.findBySectionNoOrderByDueDate(section.getSectionNo());

            //creates a list of AssignmentStudentDTO's based on the list of assignments above
            for(Assignment assignment : assignments){
                String courseId = section.getCourse().getCourseId();
              Enrollment enrollment = enrollmentRepository.findEnrollmentBySectionNoAndStudentId(
                section.getSectionNo(), studentId);
              Grade grade = gradeRepository.findByEnrollmentIdAndAssignmentId(
                enrollment.getEnrollmentId(), assignment.getAssignmentId());
              Integer score = -1;

              if (grade != null) {
                score = grade.getScore();
              }

              assignmentDTO.add(
                new AssignmentStudentDTO(
                  assignment.getAssignmentId(),
                  assignment.getTitle(),
                  assignment.getDue_date(),
                  courseId,
                  assignment.getSection().getSecId(),
                  score
                ));
            }

        }

        return assignmentDTO;
        // return a list of assignments and (if they exist) the assignment grade
        //  for all sections that the student is enrolled for the given year and semester
        //  hint: use the assignment repository method findByStudentIdAndYearAndSemesterOrderByDueDate
    }

    private void studentExists(User user) {
        // Verify user exists and is a student
        if (user == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found.");
        }
        if (!(user.getType().equals("STUDENT"))) {
            throw new ResponseStatusException(HttpStatus.CONFLICT,
                    "You are not a student.");
        }
    }

    private void instructorExists(User user) {
        // Verify user exists and is a student
        if (user == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found.");
        }
        if (!(user.getType().equals("INSTRUCTOR"))) {
            throw new ResponseStatusException(HttpStatus.CONFLICT,
                    "You are not an Instructor.");
        }
    }
}